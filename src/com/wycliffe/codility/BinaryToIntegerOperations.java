//@author wycliffe
package com.wycliffe.codility;

import java.math.BigInteger;

public class BinaryToIntegerOperations {

    public static void main(String[] args) {
        //String
        String S = "11011";
        //String
        BinaryToIntegerOperations obj = new BinaryToIntegerOperations();
        obj.solution(S);
    }

    //method to check if parsed integer is even
    public static boolean isEven(long n) {
        return (n % 2 == 0);
    }

    public int solution(String S) {

        int counter = 0; //initialize counter for steps
        int result = 0; //initialize computational temp value 
        int finalValue = 0;
        
        //convert the string to array
        char[] numbers = S.toCharArray();
 
        for (int i = numbers.length - 1; i >= 0; i--) {
            if (numbers[i] == '1') {
                 finalValue += Math.pow(2, (numbers.length - i - 1));
            }
        }
      
        if (finalValue < 0) {
            return 0;
        }
        try {

            System.out.println("Correct value: " + finalValue);

            while (finalValue != 0) { //loop while value is greater than 0
                if (isEven(finalValue)) {
                    result = finalValue / 2;
                    finalValue = result;

                    counter++; //increment counter
                    System.out.printf("Result is: %d%n", result);
                } else {
                    result = finalValue - 1;
                    finalValue = result;
                    counter++;// stack memory vs heap
                    System.out.printf("Result is: %d%n", result);
                }
            }
            System.out.printf("Number of steps are:: %d%n", counter);
            return counter;
        } catch (NumberFormatException ne) {
            return 0;
        }

    }
}
